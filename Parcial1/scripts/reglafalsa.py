# -*- coding: utf-8 -*-
"""ReglaFalsa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u4SnZkrT3etIORBastsXJ_tq8lvMaPMD
"""

import numpy as np
import matplotlib.pyplot as plt

class ReglaFalsa:
    def __init__(self, a, b, f, tol, n):
        """
        Inicializa una instancia de la clase ReglaFalsa.

        Parámetros:
        a (float): Extremo izquierdo del intervalo inicial.
        b (float): Extremo derecho del intervalo inicial.
        f (function): Función para la cual se busca una raíz.
        tol (float): Tolerancia para el criterio de convergencia.
        n (int): Número máximo de iteraciones.

        """
        self.a = a
        self.b = b
        self.f = f
        self.tol = tol
        self.n = n

    def regla_falsa(self):
        """
        Implementa el método de la regla falsa para encontrar una raíz de la función.

        Retorna:
        float or False: La aproximación de la raíz encontrada o False si no se encontró en las iteraciones dadas.
        """
        a = self.a
        b = self.b
        f = self.f
        tol = self.tol
        n = self.n
        i = 1
        FA = f(a)
        FB = f(b)
        while i <= n:
            p = (a * FB - b * FA) / (FB - FA)
            FP = f(p)
            if (FP == 0) or (abs(b - a) < tol):
                return p
            i = i + 1
            if (FA * FP > 0):
                a = p
                FA = FP
            else:
                b = p
                FB = FP
        return False

    def regla_falsa_paso_a_paso(self):
        """
        Implementa el método de la regla falsa y muestra los pasos de cada iteración.

        Retorna:
        float or False: La aproximación de la raíz encontrada o False si no se encontró en las iteraciones dadas.
        """
        a = self.a
        b = self.b
        f = self.f
        tol = self.tol
        n = self.n
        i = 1
        FA = f(a)
        FB = f(b)
        error_acumulado = abs(b - a)
        print(f"Iteración\tIntervalo\t\t\tError acumulado\t\tFA\t\t\tFB\t\t\t\tXr")
        while i <= n:
            p = (a * FB - b * FA) / (FB - FA)
            FP = f(p)
            if (FP == 0) or (abs(b - a) < tol):
                return p
            i = i + 1
            if (FA * FP > 0):
                a = p
                FA = FP
            else:
                b = p
                FB = FP
            error_acumulado = abs(b - a)
            print(f"{i}\t\t[{a:.6f}, {b:.6f}]\t\t{error_acumulado:.6f}\t\t{FA:.6f}\t\t{FB:.6f}\t\t\t{p:.6f}")
        return False

    def __str__(self):
        """
        Representación en cadena de la raíz aproximada encontrada utilizando el método de la regla falsa.

        Retorna:
        str: La raíz aproximada.
        """
        return str(self.regla_falsa())

if __name__ == "__main__":
    for i, func in enumerate(f):
        funcion = ReglaFalsa(0, 1, func, 1e-10, 100)
        raiz = funcion.regla_falsa_paso_a_paso()

        if raiz is not False:
            print(f"Raíz encontrada para función {i+1}: {raiz}")
        else:
            print(f"No se encontró raíz para función {i+1}")

