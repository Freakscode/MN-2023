# -*- coding: utf-8 -*-
"""Métodos_Numéricos_EJ_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p2S3HZxO9MFC2N4LnIYXazyxcf-l6Owz
"""

import numpy as np

class Biseccion:
    def __init__(self, a, b, f, tol, n):
        self.a = a
        self.b = b
        self.f = f
        self.tol = tol
        self.n = n

    def biseccion(self):
        a = self.a
        b = self.b
        f = self.f
        tol = self.tol
        n = self.n
        i = 1
        FA = f(a)
        while i <= n:
            p = a + (b - a) / 2
            FP = f(p)
            if (FP == 0) or ((b - a) / 2 < tol):
                return p
            i = i + 1
            if (FA * FP > 0):
                a = p
                FA = FP
            else:
                b = p
        return False

    def biseccion_paso_a_paso(self):
        a = self.a
        b = self.b
        f = self.f
        tol = self.tol
        n = self.n
        i = 1
        FA = f(a)
        error_acumulado = abs(b - a)
        print(f"Iteración\tIntervalo\t\t\tError acumulado\t\tFA\t\t\tFB\t\t\t\tXe")
        while i <= n:
            p = a + (b - a) / 2
            FP = f(p)
            if (FP == 0) or ((b - a) / 2 < tol):
                return p
            i = i + 1
            if (FA * FP > 0):
                a = p
                FA = FP
            else:
                b = p
            error_acumulado = abs(b - a)
            print(f"{i}\t\t[{a:.6f}, {b:.6f}]\t\t{error_acumulado:.6f}\t\t{FA:.6f}\t\t{FP:.6f}\t\t\t{p:.6f}")
        return False

    def __str__(self):
        return str(self.biseccion())

f = [lambda x: np.exp(x) - 3 * x ** 2, lambda x: np.sin(x) - np.cos(x), lambda x: np.exp(x) - 2 * np.sin(x) - 1, lambda x: x**2 - 5*x + 6]

if __name__ == "__main__":
    for i, func in enumerate(f):
        funcion = Biseccion(0, 1, func, 1e-10, 100)
        raiz = funcion.biseccion_paso_a_paso()
        if raiz is not False:
            print(f"Raíz encontrada para función {i+1}: {raiz}")
        else:
            print(f"No se encontró raíz para función {i+1}")